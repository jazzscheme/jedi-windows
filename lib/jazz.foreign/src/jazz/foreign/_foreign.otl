(module jazz.foreign jazz
  (export (jazz.foreign.syntax (phase syntax)))
  (import (jazz.foreign.syntax (phase syntax)))
  (import (jazz.syntax (phase syntax)))
  (hub get-arguments)
  (hub get-body)
  (hub get-c-type)
  (hub get-expansion)
  (hub get-form)
  (hub get-inclusions)
  (hub get-kind)
  (hub get-name)
  (hub get-pointer-types)
  (hub get-signature)
  (hub set-body)
  (hub set-pointer-types)
  (hub set-signature)
  (definition current-callable)
  (definition callback-exception)
  (definition public (with-callable name thunk))
  (definition debug-non-callable-wrapped-callbacks?)
  (definition public (with-callback name exit-value thunk))
  (definition public sizeof-size_t)
  (definition public sizeof-float)
  (definition public sizeof-double)
  (definition public size_t-size <fx>)
  (definition public float-size <fx>)
  (definition public double-size <fx>)
  (c-named-declare size_t-declare "\n\nstatic ___SCMOBJ SCMOBJ_to_size_t (___SCMOBJ src, size_t *dst) {\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n\n  if ( ___FIXNUMP(src) ) {\n    ___WORD ___temp = ___INT(src);\n                            \n    if ( ___temp > ___MAX_FIX32 || ___temp < 0 )\n       ___err = ___FIX(___UNKNOWN_ERR);\n    else\n       *dst = ___CAST(size_t,___temp);\n  }\n  \n  else\n    ___err = ___FIX(___UNKNOWN_ERR);\n    \n  return ___err;\n}\n\n\nstatic ___SCMOBJ size_t_to_SCMOBJ (size_t src, ___SCMOBJ *dst) {\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n\n  if ( src > ___MAX_FIX32 )\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    *dst = ___FIX(src);\n  \n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_size_t(src,dst,i) \\\nif ((___err = SCMOBJ_to_size_t (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_size_t(src,dst,i) }\n\n#define ___BEGIN_CFUN_size_t_to_SCMOBJ(src,dst) \\\nif ((___err = size_t_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_size_t_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_size_t_to_SCMOBJ(src,dst,i) \\\nif ((___err = size_t_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_size_t_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_size_t(src,dst) \\\n{ ___err = SCMOBJ_to_size_t (src, &dst);\n#define ___END_SFUN_SCMOBJ_to_size_t(src,dst) }\n\n")
  (c-named-declare U8PTR-declare "\n           \ntypedef ___U8*  U8PTR;\n\n___SCMOBJ SCMOBJ_to_U8PTR (___SCMOBJ src, U8PTR *dst)\n{\n  ___SCMOBJ ___temp; // for U8VECTORP\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n  if (!___U8VECTORP(src))\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    {\n     *dst = ___CAST(___U8*,___BODY_AS(src,___tSUBTYPED));\n    }\n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_U8PTR(src,dst,i) \\\nif ((___err = SCMOBJ_to_U8PTR (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_U8PTR(src,dst,i) }\n\n#define ___BEGIN_CFUN_U8PTR_to_SCMOBJ(src,dst) \\\nif ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_U8PTR_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_U8PTR_to_SCMOBJ(src,dst,i) \\\nif ((___err = U8PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_U8PTR_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_U8PTR(src,dst) \\\n{ ___err = ___FIX(___UNKNOWN_ERR);\n#define ___END_SFUN_SCMOBJ_to_U8PTR(src,dst) }\n\n")
  (c-named-declare U16PTR-declare "\n\ntypedef ___U16* U16PTR;\n\n___SCMOBJ SCMOBJ_to_U16PTR (___SCMOBJ src, U16PTR *dst)\n{\n  ___SCMOBJ ___temp; // for U16VECTORP\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n  if (!___U16VECTORP(src))\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    {\n     *dst = ___CAST(___U16*,___BODY_AS(src,___tSUBTYPED));\n    }\n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_U16PTR(src,dst,i) \\\nif ((___err = SCMOBJ_to_U16PTR (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_U16PTR(src,dst,i) }\n\n#define ___BEGIN_CFUN_U16PTR_to_SCMOBJ(src,dst) \\\nif ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_U16PTR_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_U16PTR_to_SCMOBJ(src,dst,i) \\\nif ((___err = U16PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_U16PTR_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_U16PTR(src,dst) \\\n{ ___err = ___FIX(___UNKNOWN_ERR);\n#define ___END_SFUN_SCMOBJ_to_U16PTR(src,dst) }\n\n")
  (c-named-declare U32PTR-declare "\n           \ntypedef ___U32* U32PTR;\n\n___SCMOBJ SCMOBJ_to_U32PTR (___SCMOBJ src, U32PTR *dst)\n{\n  ___SCMOBJ ___temp; // for U32VECTORP\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n  if (!___U32VECTORP(src))\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    {\n     *dst = ___CAST(___U32*,___BODY_AS(src,___tSUBTYPED));\n    }\n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_U32PTR(src,dst,i) \\\nif ((___err = SCMOBJ_to_U32PTR (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_U32PTR(src,dst,i) }\n\n#define ___BEGIN_CFUN_U32PTR_to_SCMOBJ(src,dst) \\\nif ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_U32PTR_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_U32PTR_to_SCMOBJ(src,dst,i) \\\nif ((___err = U32PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_U32PTR_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_U32PTR(src,dst) \\\n{ ___err = ___FIX(___UNKNOWN_ERR);\n#define ___END_SFUN_SCMOBJ_to_U32PTR(src,dst) }\n\n")
  (c-named-declare F64PTR-declare "\n           \ntypedef ___F64*  F64PTR;\n\nstatic ___SCMOBJ SCMOBJ_to_F64PTR (___SCMOBJ src, F64PTR *dst)\n{\n  ___SCMOBJ ___temp; // for F64VECTORP\n  ___SCMOBJ ___err = ___FIX(___NO_ERR);\n  if (!___F64VECTORP(src))\n    ___err = ___FIX(___UNKNOWN_ERR);\n  else\n    {\n     *dst = ___CAST(___F64*,___BODY_AS(src,___tSUBTYPED));\n    }\n  return ___err;\n}\n\n#define ___BEGIN_CFUN_SCMOBJ_to_F64PTR(src,dst,i) \\\nif ((___err = SCMOBJ_to_F64PTR (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_SCMOBJ_to_F64PTR(src,dst,i) }\n\n#define ___BEGIN_CFUN_F64PTR_to_SCMOBJ(src,dst) \\\nif ((___err = ___FIX(___UNKNOWN_ERR)) == ___FIX(___NO_ERR)) {\n#define ___END_CFUN_F64PTR_to_SCMOBJ(src,dst) }\n\n#define ___BEGIN_SFUN_F64PTR_to_SCMOBJ(src,dst,i) \\\nif ((___err = F64PTR_to_SCMOBJ (src, &dst)) == ___FIX(___NO_ERR)) {\n#define ___END_SFUN_F64PTR_to_SCMOBJ(src,dst,i) }\n\n#define ___BEGIN_SFUN_SCMOBJ_to_F64PTR(src,dst) \\\n{ ___err = ___FIX(___UNKNOWN_ERR);\n#define ___END_SFUN_SCMOBJ_to_F64PTR(src,dst) }\n\n")
  (c-type void (native void))
  (c-type char (native char))
  (c-type wchar_t (native wchar_t))
  (c-type short (native short))
  (c-type int (native int))
  (c-type long (native long))
  (c-type float (native float))
  (c-type double (native double))
  (c-type unsigned-int8 (native unsigned-int8))
  (c-type unsigned-int16 (native unsigned-int16))
  (c-type unsigned-int32 (native unsigned-int32))
  (c-type unsigned-int64 (native unsigned-int64))
  (c-type unsigned-char (native unsigned-char))
  (c-type unsigned-short (native unsigned-short))
  (c-type unsigned-int (native unsigned-int))
  (c-type unsigned-long (native unsigned-long))
  (c-type int8 (native int8))
  (c-type int16 (native int16))
  (c-type int32 (native int32))
  (c-type int64 (native int64))
  (c-type UTF-8-string (native UTF-8-string))
  (c-type nonnull-UTF-8-string (native nonnull-UTF-8-string))
  (c-type UTF-16-string (native UTF-16-string))
  (c-type char-string (native char-string))
  (c-type wchar_t-string (native wchar_t-string))
  (c-type nonnull-char-string (native nonnull-char-string))
  (c-type nonnull-char-string-list (native nonnull-char-string-list))
  (c-type signed-char (native signed-char))
  (c-type bool (native bool))
  (c-type scheme-object (native scheme-object))
  (c-type byte (native unsigned-int8))
  (c-type uchar (native unsigned-char))
  (c-type ushort (native unsigned-short))
  (c-type uint (native unsigned-int))
  (c-type ulong (native unsigned-long))
  (c-type uint8 (native unsigned-int8))
  (c-type uint16 (native unsigned-int16))
  (c-type uint32 (native unsigned-int32))
  (c-type uint64 (native unsigned-int64))
  (c-type void* (pointer void #f))
  (c-type char* (pointer char))
  (c-type wchar_t* (pointer wchar_t))
  (c-type short* (pointer short))
  (c-type int* (pointer int))
  (c-type long* (pointer long))
  (c-type float* (pointer float))
  (c-type double* (pointer double))
  (c-type byte* (pointer byte))
  (c-type uchar* (pointer uchar))
  (c-type uint* (pointer uint))
  (c-type ulong* (pointer ulong))
  (c-type uint8* (pointer uint8))
  (c-type int8* (pointer int8))
  (c-type uint8** (pointer uint8*))
  (c-type uint16* (pointer uint16))
  (c-type uint32* (pointer uint32))
  (c-type uint64* (pointer uint64))
  (c-type int64* (pointer int64))
  (c-type size_t "size_t" "size_t_to_SCMOBJ" "SCMOBJ_to_size_t" #t size_t-declare)
  (c-type U8PTR "U8PTR" "U8PTR_to_SCMOBJ" "SCMOBJ_to_U8PTR" #t U8PTR-declare)
  (c-type U16PTR "U16PTR" "U16PTR_to_SCMOBJ" "SCMOBJ_to_U16PTR" #t U16PTR-declare)
  (c-type U32PTR "U32PTR" "U32PTR_to_SCMOBJ" "SCMOBJ_to_U32PTR" #t U32PTR-declare)
  (c-type F64PTR "F64PTR" "F64PTR_to_SCMOBJ" "SCMOBJ_to_F64PTR" #t F64PTR-declare)
  (definition public byte-sizeof)
  (definition public void*->byte*)
  (definition public byte*->void*)
  (definition public byte*-alloc)
  (definition public byte*-free)
  (definition public byte*-set!)
  (definition public byte*-ref)
  (definition public byte*-get)
  (definition public uint8-sizeof)
  (definition public void*->uint8*)
  (definition public uint8*->void*)
  (definition public uint8*-alloc)
  (definition public uint8*-free)
  (definition public uint8*-set!)
  (definition public uint8*-ref)
  (definition public uint8*-get)
  (definition public int8-sizeof)
  (definition public void*->int8*)
  (definition public int8*->void*)
  (definition public int8*-alloc)
  (definition public int8*-free)
  (definition public int8*-set!)
  (definition public int8*-ref)
  (definition public int8*-get)
  (definition public uint8*-sizeof)
  (definition public void*->uint8**)
  (definition public uint8**->void*)
  (definition public uint8**-alloc)
  (definition public uint8**-free)
  (definition public uint8**-set!)
  (definition public uint8**-ref)
  (definition public uint8**-get)
  (definition public uint16-sizeof)
  (definition public void*->uint16*)
  (definition public uint16*->void*)
  (definition public uint16*-alloc)
  (definition public uint16*-free)
  (definition public uint16*-set!)
  (definition public uint16*-ref)
  (definition public uint16*-get)
  (definition public uint32-sizeof)
  (definition public void*->uint32*)
  (definition public uint32*->void*)
  (definition public uint32*-alloc)
  (definition public uint32*-free)
  (definition public uint32*-set!)
  (definition public uint32*-ref)
  (definition public uint32*-get)
  (definition public int64-sizeof)
  (definition public void*->int64*)
  (definition public int64*->void*)
  (definition public int64*-alloc)
  (definition public int64*-free)
  (definition public int64*-set!)
  (definition public int64*-ref)
  (definition public int64*-get)
  (definition public char-sizeof)
  (definition public void*->char*)
  (definition public char*->void*)
  (definition public char*-alloc)
  (definition public char*-free)
  (definition public char*-set!)
  (definition public char*-ref)
  (definition public char*-get)
  (definition public wchar_t-sizeof)
  (definition public void*->wchar_t*)
  (definition public wchar_t*->void*)
  (definition public wchar_t*-alloc)
  (definition public wchar_t*-free)
  (definition public wchar_t*-set!)
  (definition public wchar_t*-ref)
  (definition public wchar_t*-get)
  (definition public short-sizeof)
  (definition public void*->short*)
  (definition public short*->void*)
  (definition public short*-alloc)
  (definition public short*-free)
  (definition public short*-set!)
  (definition public short*-ref)
  (definition public short*-get)
  (definition public int-sizeof)
  (definition public void*->int*)
  (definition public int*->void*)
  (definition public int*-alloc)
  (definition public int*-free)
  (definition public int*-set!)
  (definition public int*-ref)
  (definition public int*-get)
  (definition public uint-sizeof)
  (definition public void*->uint*)
  (definition public uint*->void*)
  (definition public uint*-alloc)
  (definition public uint*-free)
  (definition public uint*-set!)
  (definition public uint*-ref)
  (definition public uint*-get)
  (definition public long-sizeof)
  (definition public void*->long*)
  (definition public long*->void*)
  (definition public long*-alloc)
  (definition public long*-free)
  (definition public long*-set!)
  (definition public long*-ref)
  (definition public long*-get)
  (definition public double-sizeof)
  (definition public void*->double*)
  (definition public double*->void*)
  (definition public double*-alloc)
  (definition public double*-free)
  (definition public double*-set!)
  (definition public double*-ref)
  (definition public double*-get)
  (definition public ulong-sizeof)
  (definition public void*->ulong*)
  (definition public ulong*->void*)
  (definition public ulong*-alloc)
  (definition public ulong*-free)
  (definition public ulong*-set!)
  (definition public ulong*-ref)
  (definition public ulong*-get)
  (definition public float-sizeof)
  (definition public void*->float*)
  (definition public float*->void*)
  (definition public float*-alloc)
  (definition public float*-free)
  (definition public float*-set!)
  (definition public float*-ref)
  (definition public float*-get)
  (definition public uint8*->char-string)
  (definition public char*->char-string)
  (definition public char*->UTF-8-string)
  (definition public uint16*->UTF-16-string)
  (definition public wchar_t*->wchar_t-string)
  (definition public uint32*->uint8*)
  (definition public uint8*->ulong*)
  (definition public long*->uint8*)
  (definition public int->void*)
  (definition public char-string->uint8*)
  (definition public UTF-16-string->uint16*)
  (definition public heap-malloc)
  (definition public heap-calloc)
  (definition public heap-free)
  (definition public (u8vector->uint8* vector))
  (definition public (uint8*->u8vector pt length))
  (definition public (u32vector->long* vector))
  (definition public (u32vector->uint32* vector)))
