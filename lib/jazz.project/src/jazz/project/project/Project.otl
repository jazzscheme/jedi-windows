(module jazz.project.project.Project jazz
  (import (jazz.catalog))
  (import (jazz.component))
  (import (jazz.designer))
  (import (jazz.git))
  (import (jazz.io))
  (import (jazz.markup))
  (import (jazz.project))
  (import (jazz.view))
  (class Project extends Project-File implements Project-Container
    (definition class-form)
    (method meta override (set-class-form self form))
    (method meta override (get-class-form self))
    (method meta override (get-class-forms self))
    (method meta override (get-class-descriptor self (context: context (unspecified))))
    (property title accessors generate)
    (property icon accessors generate)
    (property owner accessors generate)
    (property copyright accessors generate)
    (property version accessors generate)
    (property include-extensions accessors generate)
    (property documentation accessors generate)
    (property editable? accessors generate)
    (property active? accessors generate)
    (property catalog-extensions accessors generate)
    (property catalog-heuristics accessors generate)
    (property description-file accessors generate)
    (property depot-directory accessors generate)
    (property active-project accessors generate)
    (property active-traits accessors generate)
    (property dynamic? accessors generate)
    (property sort? accessors explicit)
    (slot catalog accessors generate)
    (slot depot accessors generate)
    (slot dynamic-projects accessors generate)
    (property catalog? accessors generate)
    (method override (print self output readably))
    (method override (finish self rest))
    (method (update-dynamic-projects self))
    (method public (dynamic-project? self))
    (method public (get-effective-dynamic-projects self))
    (method public (get-effective-dependencies-file self))
    (method public (update-dynamic-dependencies self))
    (method public virtual (project-title self))
    (method public (get-parent-project self))
    (method public (get-sort? self))
    (method public (set-sort? self value))
    (method public virtual (concrete? self))
    (method public (project-context self))
    (method public (contextualize-pathname self pathname))
    (method override (catalog-name self))
    (method public (save-catalogs self))
    (method public (load-catalogs self (include-inactives?: include-inactives? (unspecified))))
    (method public (load-catalog self))
    (method public (require-catalog self (report?: report? (unspecified))))
    (method (create-catalog self))
    (method protected virtual (catalog-output-base self))
    (method protected virtual (catalog-output self))
    (method package (has-content? self))
    (method public (for-each-active-catalog self proc))
    (method public virtual (get-effective-editable? self))
    (method public (for-each-project self proc (include-self?: include-self? (unspecified)) (include-inactives?: include-inactives? (unspecified)) (include-groups?: include-groups? (unspecified)) (stop-test: stop-test (unspecified))))
    (method public (fold-projects self proc seed (include-inactives?: include-inactives? (unspecified)) (include-groups?: include-groups? (unspecified))))
    (method public (project-path self))
    (method public (find-project self name (use-name?: use-name? (unspecified)) (include-inactives?: include-inactives? (unspecified)) (error?: error? (unspecified))))
    (method public (require-project self name))
    (method public (for-each-file self proc (type (unspecified))))
    (method public (collect-files self (type (unspecified))))
    (method public (fold-files self proc seed (type (unspecified))))
    (method public (iterate-files self proc (extensions: extensions (unspecified))))
    (method public (iterate-catalog-files self proc))
    (method public virtual (project-name self))
    (method public virtual (project-action self . rest))
    (method public virtual (project-run self . rest))
    (method public virtual (run-arguments self))
    (method public virtual (project-debug self . rest))
    (method public virtual (debug-arguments self))
    (method public virtual (project-test self . rest))
    (method public virtual (project-validate self . rest))
    (method public virtual (project-build self))
    (method public virtual (project-clean self))
    (method public (project-depot self)))
  (hub get-title)
  (hub set-title)
  (hub get-icon)
  (hub set-icon)
  (hub get-owner)
  (hub set-owner)
  (hub get-copyright)
  (hub set-copyright)
  (hub get-version)
  (hub set-version)
  (hub get-include-extensions)
  (hub set-include-extensions)
  (hub get-documentation)
  (hub set-documentation)
  (hub get-editable?)
  (hub set-editable?)
  (hub get-active?)
  (hub set-active?)
  (hub get-catalog-extensions)
  (hub set-catalog-extensions)
  (hub get-catalog-heuristics)
  (hub set-catalog-heuristics)
  (hub get-description-file)
  (hub set-description-file)
  (hub get-depot-directory)
  (hub set-depot-directory)
  (hub get-active-project)
  (hub set-active-project)
  (hub get-active-traits)
  (hub set-active-traits)
  (hub get-dynamic?)
  (hub set-dynamic?)
  (hub get-catalog)
  (hub set-catalog)
  (hub get-depot)
  (hub set-depot)
  (hub get-dynamic-projects)
  (hub set-dynamic-projects)
  (hub get-catalog?)
  (hub set-catalog?)
  (hub dynamic-project?)
  (hub get-effective-dynamic-projects)
  (hub get-effective-dependencies-file)
  (hub update-dynamic-dependencies)
  (hub project-title)
  (hub get-parent-project)
  (hub get-sort?)
  (hub set-sort?)
  (hub concrete?)
  (hub project-context)
  (hub contextualize-pathname)
  (hub save-catalogs)
  (hub load-catalogs)
  (hub load-catalog)
  (hub require-catalog)
  (hub catalog-output-base)
  (hub catalog-output)
  (hub has-content?)
  (hub for-each-active-catalog)
  (hub get-effective-editable?)
  (hub for-each-project)
  (hub fold-projects)
  (hub project-path)
  (hub find-project)
  (hub require-project)
  (hub for-each-file)
  (hub collect-files)
  (hub fold-files)
  (hub iterate-files)
  (hub iterate-catalog-files)
  (hub project-name)
  (hub project-action)
  (hub project-run)
  (hub run-arguments)
  (hub project-debug)
  (hub debug-arguments)
  (hub project-test)
  (hub project-validate)
  (hub project-build)
  (hub project-clean)
  (hub project-depot))
