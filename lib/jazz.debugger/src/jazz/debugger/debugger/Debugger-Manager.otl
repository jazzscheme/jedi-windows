(module jazz.debugger.debugger.Debugger-Manager jazz
  (import (jazz.application))
  (import (jazz.component))
  (import (jazz.debuggee))
  (import (jazz.debugger))
  (import (jazz.event))
  (import (jazz.feedback))
  (import (jazz.graphic))
  (import (jazz.media))
  (import (jazz.preferences))
  (import (jazz.presence))
  (import (jazz.project))
  (import (jazz.settings))
  (import (jazz.ui))
  (import (jazz.view))
  (import (jazz.workspace))
  (definition public onsite stopped-frame-color)
  (definition public onsite visited-highlight-color)
  (hub on-restart-safe)
  (hub on-break-safe)
  (hub on-continue-safe)
  (hub on-step-safe)
  (hub on-step-over-safe)
  (class Debugger-Manager extends Object
    (slot active-stops)
    (slot unvisited-stops)
    (slot unzoomed-stops)
    (slot liveliness-cache)
    (slot evaluated-processes)
    (slot evaluate-when getter generate)
    (slot focused-mode? getter generate)
    (slot focused-process getter generate)
    (slot process getter generate)
    (slot thread getter generate)
    (slot frame getter generate)
    (method override (initialize self))
    (method public (debugging? self))
    (method public (selected-process self))
    (method public (selected-thread self))
    (method public (selected-frame self))
    (method protected virtual (report-message self format-string . rest))
    (method protected virtual (report-status self format-string . rest))
    (method public (visit-debugged self debugged))
    (method public (unzoom-debugged self debugged))
    (method public (update-status self))
    (method public (get-stopped-frame-color self debugged))
    (method public (get-visited-highlight-color self debugged))
    (method (debugged-stopped? self debugged))
    (method package (debugged-visited? self debugged))
    (method (debugged-zoomed? self debugged))
    (method public (get-active-stops self debugged))
    (method public virtual (process-evaluate-when self process))
    (method public (process-evaluate-never self process))
    (method public (process-evaluate-known self process))
    (method public (process-evaluate-always self process))
    (method public (toggle-focused-mode self))
    (method public (require-focused-process self))
    (method public (focus-process self process))
    (method (set-focused-process self process))
    (method (focused-process-update self))
    (method public (attach-process self process focus?))
    (method public (detach-process self process))
    (method public (for-each-process self proc (live-test?: live-test? (unspecified))))
    (method public (get-process-debugger self target))
    (method public (find-live-process self process))
    (method public (process-changed self new-process))
    (definition (update-processes-highlight process))
    (method public (get-alive? self process))
    (method public (set-alive? self process alive?))
    (method (cleanup-liveliness-cache self process))
    (method public (for-each-thread self proc (detailed?: detailed? (unspecified)) (sort-priority?: sort-priority? (unspecified))))
    (method public (thread-changed self new-thread (user-origin: user-origin (unspecified))))
    (definition (update-threads-highlight thread))
    (method public (for-each-frame self proc))
    (method public (frame-changed self new-frame (user-origin: user-origin (unspecified))))
    (definition *frame-indicator*)
    (method public (edit-frame self frame (select?: select? (unspecified))))
    (method public (register-stop self process thread stop (sound?: sound? (unspecified)) (step?: step? (unspecified))))
    (method public (update-variables-zoom self))
    (method public (unregister-stop self process thread stop))
    (method package (on-restart self evt))
    (method package (on-break self evt))
    (method package (on-continue self evt))
    (method package (on-step self evt))
    (method package (on-step-over self evt))
    (method public (filename-processes self filename))
    (method public (effective-filename-processes self filename))
    (method public (evaluation-filename-processes self filename))
    (method public (determine-focused-processes self))
    (method (remove-never-processes self processes))
    (method package (collect-always-processes self))
    (method public (determine-filename-processes self filename))
    (method public (process-needs-filenames? self process))
    (method public (process-received-filenames? self process))
    (method public (evaluate-filename-expressions self filename forms syntax str container line col evaluation-mode))
    (method public (has-information? self process))
    (method public (determine-processes self filter)))
  (hub get-evaluate-when)
  (hub get-focused-mode?)
  (hub get-focused-process)
  (hub get-process)
  (hub get-thread)
  (hub get-frame)
  (hub debugging?)
  (hub selected-process)
  (hub selected-thread)
  (hub selected-frame)
  (hub report-message)
  (hub report-status)
  (hub visit-debugged)
  (hub unzoom-debugged)
  (hub update-status)
  (hub get-stopped-frame-color)
  (hub get-visited-highlight-color)
  (hub debugged-visited?)
  (hub get-active-stops)
  (hub process-evaluate-when)
  (hub process-evaluate-never)
  (hub process-evaluate-known)
  (hub process-evaluate-always)
  (hub toggle-focused-mode)
  (hub require-focused-process)
  (hub focus-process)
  (hub attach-process)
  (hub detach-process)
  (hub for-each-process)
  (hub get-process-debugger)
  (hub find-live-process)
  (hub process-changed)
  (hub get-alive?)
  (hub set-alive?)
  (hub for-each-thread)
  (hub thread-changed)
  (hub for-each-frame)
  (hub frame-changed)
  (hub edit-frame)
  (hub register-stop)
  (hub update-variables-zoom)
  (hub unregister-stop)
  (hub on-restart)
  (hub on-break)
  (hub on-continue)
  (hub on-step)
  (hub on-step-over)
  (hub filename-processes)
  (hub effective-filename-processes)
  (hub evaluation-filename-processes)
  (hub determine-focused-processes)
  (hub collect-always-processes)
  (hub determine-filename-processes)
  (hub process-needs-filenames?)
  (hub process-received-filenames?)
  (hub evaluate-filename-expressions)
  (hub has-information?)
  (hub determine-processes))
