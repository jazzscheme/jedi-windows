(module jazz.editor.lisp.text.Lisp-Explorer jazz
  (import (jazz.editor))
  (import (jazz.editor.jazz))
  (import (jazz.editor.lisp))
  (import (jazz.exemplar))
  (import (jazz.text))
  (class Lisp-Explorer extends Code-Explorer
    (slot find-comment-last-row <fx+>)
    (slot find-comment-last-col <fx+>)
    (method public (current-expr self))
    (method override (forward-expr self))
    (method override (backward-expr self))
    (method protected (forward-simple-expr self))
    (method protected (backward-simple-expr self))
    (method override (forward-constituent self))
    (method override (backward-constituent self))
    (method protected (backward-escaped-symbol self))
    (method protected (backward-scheme-char self))
    (method protected (forward-expr-comment self))
    (method protected (forward-named-comment self))
    (method protected (forward-multiline-comment self))
    (method protected (backward-multiline-comment self))
    (method protected (forward-sharp self))
    (method protected (forward-backslahed-symbol self))
    (method protected (forward-escaped-symbol self))
    (method protected virtual (forward-delimited-string self))
    (method protected (backward-delimited-string self))
    (method protected virtual (forward-syntax-string self))
    (method protected (backward-syntax-string self))
    (method protected (forward-named-string self))
    (method protected (forward-scheme-char self))
    (method protected (forward-string self))
    (method protected (backward-string self))
    (method public (enter-list self))
    (method public (exit-list self))
    (method public (enter-composite self))
    (method public (exit-composite self))
    (method public (skip-forward self name <string>))
    (method public (skip-backward self name <string>))
    (method public (forward-modifiers self modifiers))
    (method (forward-comments self))
    (method (backward-comments self))
    (method override (forward-whites self) <void>)
    (method override (backward-whites self) <void>)
    (method (backward-lisp-comment self) <bool>)
    (method override (outer-expr self (atomic?: atomic? (unspecified)) (explore-whitespace?: explore-whitespace? (unspecified)) (uniform-style?: uniform-style? (unspecified))))
    (method public (form-expr self))
    (method public (form-name self form))
    (method public virtual (namespace-expr? self))
    (method public virtual (declaration-expr? self))
    (method public virtual (namespace-name? self name))
    (method public virtual (declaration-name? self name))
    (method public virtual (inner-name? self name))
    (method public (declaration-modifiers/name self))
    (method package (declaration-name self))
    (method protected virtual (find-expression-syntax self symbol))
    (method public (for-each-comment self proc <procedure> (start-line: start-line (unspecified)) (end-line: end-line (unspecified))))
    (method public virtual (walk-declarations self context <Lisp-Entry+> declaration keyword expression doc))
    (method public virtual (walk-declaration self context <Lisp-Entry+> declaration keyword expression doc))
    (method protected virtual (walk-named-declaration self context <Lisp-Entry+> symbol form declaration keyword expression doc))
    (method protected virtual (find-named-walker self name))
    (method protected (walk-parameters self context <Lisp-Entry+> declaration keyword expression doc))
    (method protected (walk-unknown self context <Lisp-Entry+> symbol form declaration keyword expression doc))
    (method public (iterate-expressions self proc (mode: mode (unspecified)) (recursive?: recursive? (unspecified))))
    (method public (iterate-expression self proc (mode: mode (unspecified)) (recursive?: recursive? (unspecified))))
    (method (for-each-expressions self proc mode))
    (method (for-each-expression self proc mode))
    (method public (walk-expressions self context <Lisp-Entry+> expression (mode (unspecified)) (first? (unspecified))))
    (method (walk-expression self context <Lisp-Entry+> expression mode first?))
    (method (walk-specifier self context <Lisp-Entry+> expression mode))
    (method public (constant? self))
    (method public (get-constant self))
    (method public (search-expressions self mode search-context <Search-Set> position whole-words? ignore-case?))
    (method (match? self expl-mode target)))
  (hub current-expr)
  (hub forward-simple-expr)
  (hub backward-simple-expr)
  (hub backward-escaped-symbol)
  (hub backward-scheme-char)
  (hub forward-expr-comment)
  (hub forward-named-comment)
  (hub forward-multiline-comment)
  (hub backward-multiline-comment)
  (hub forward-sharp)
  (hub forward-backslahed-symbol)
  (hub forward-escaped-symbol)
  (hub forward-delimited-string)
  (hub backward-delimited-string)
  (hub forward-syntax-string)
  (hub backward-syntax-string)
  (hub forward-named-string)
  (hub forward-scheme-char)
  (hub forward-string)
  (hub backward-string)
  (hub enter-list)
  (hub exit-list)
  (hub enter-composite)
  (hub exit-composite)
  (hub skip-forward)
  (hub skip-backward)
  (hub forward-modifiers)
  (hub form-expr)
  (hub form-name)
  (hub namespace-expr?)
  (hub declaration-expr?)
  (hub namespace-name?)
  (hub declaration-name?)
  (hub inner-name?)
  (hub declaration-modifiers/name)
  (hub declaration-name)
  (hub find-expression-syntax)
  (hub for-each-comment)
  (hub walk-declarations)
  (hub walk-declaration)
  (hub walk-named-declaration)
  (hub find-named-walker)
  (hub walk-parameters)
  (hub walk-unknown)
  (hub iterate-expressions)
  (hub iterate-expression)
  (hub walk-expressions)
  (hub constant?)
  (hub get-constant)
  (hub search-expressions))
