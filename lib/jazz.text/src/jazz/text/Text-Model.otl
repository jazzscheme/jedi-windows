(module jazz.text.Text-Model jazz
  (import (jazz.application))
  (import (jazz.component))
  (import (jazz.document))
  (import (jazz.event))
  (import (jazz.exemplar))
  (import (jazz.geometry))
  (import (jazz.graphic))
  (import (jazz.io))
  (import (jazz.markup))
  (import (jazz.outline))
  (import (jazz.platform))
  (import (jazz.skin))
  (import (jazz.text))
  (import (jazz.tree))
  (import (jazz.ui))
  (import (jazz.ui.skin))
  (import (jazz.undoer))
  (import (jazz.view))
  (import (jazz.workspace))
  (definition compare-monikers)
  (class Text-Model extends Outline-Model
    (definition class-form)
    (method meta override (set-class-form self form))
    (method meta override (get-class-form self))
    (method meta override (get-class-forms self))
    (method meta override (get-class-descriptor self (context: context (unspecified))))
    (property protected text accessors explicit)
    (property protected wrap? accessors generate)
    (property protected base-format accessors generate)
    (property protected default-format accessors explicit)
    (property protected base-style accessors generate)
    (property protected default-style accessors explicit)
    (property protected paragraph-spacing <fx> accessors generate)
    (property protected char-encoding accessors generate)
    (property protected eol-encoding accessors generate)
    (property protected propagate-styles? accessors generate)
    (slot protected syntax accessors generate)
    (slot protected undoer <Undoer> getter generate)
    (slot protected user-tabs)
    (slot protected tabs accessors generate)
    (slot protected formats getter generate)
    (slot protected styles getter generate)
    (slot protected wrap-width accessors generate)
    (slot protected wrap-patch accessors generate)
    (definition (make-formats))
    (definition (make-styles))
    (method override (prepare self rest))
    (method override (install-child self form creator creator-branch restore-form))
    (method override (finish self rest))
    (method protected virtual (new-syntax self) <Text-Syntax>)
    (method package (get-paragraphs self) <Axis>)
    (method package (set-paragraphs self lst))
    (method override (get-modified? self))
    (method override (set-modified? self state))
    (method package (reset-modified? self))
    (method package (update-status self))
    (method package (update-moniker-time self moniker))
    (method package (load-content self moniker))
    (method package (save-content self moniker))
    (method override (save-to self moniker))
    (method package (reload-moniker self moniker))
    (method package (compare-moniker self moniker))
    (method protected virtual (empty-content self))
    (method override (get-content self))
    (method override (set-content self lst))
    (method public (empty-text self))
    (method (set-unformatted-content self lst))
    (method public (get-string-content self) <string>)
    (method public (set-string-content self content <string>) <void>)
    (method (make-string-paragraph self format string <string>) <Paragraph>)
    (method (make-paragraph self format string <string> runs))
    (method public virtual (read-content self moniker))
    (method protected virtual (read-moniker self moniker))
    (method public (reload-content self lst))
    (method override (content-size-change self size <Dimension>))
    (method public (for-each-logical-range self range <Range$Cell$> proc))
    (method public (for-each-range self range <Range$Cell$> proc))
    (method (make-tabs self))
    (method public (make-tabs-from self from tab-size number))
    (method override (can-undo? self))
    (method override (can-redo? self))
    (method override (undo self))
    (method override (redo self))
    (method public (text-beginning self) <Cell>)
    (method public (text-ending self) <Cell>)
    (method public (text-range self) <Range$Cell$>)
    (method public (text-empty? self) <bool>)
    (method public (get-char self pos <Cell>) <char>)
    (method public (get-string self range <Range$Cell$>) <string>)
    (method public (next! self pos <Cell>) <bool>)
    (method public (previous! self pos <Cell>) <bool>)
    (method public (next-cell self pos <Cell>) <Cell+>)
    (method public (previous-cell self pos <Cell>) <Cell+>)
    (method public (get-range-strings self range))
    (method public (next-pos self pos <Cell> offset <fx>) <Cell+>)
    (method public (previous-pos self pos <Cell> offset <fx>) <Cell+>)
    (method public (get-column self line <fx>) <fx>)
    (method override (dynamic-scrollee? self))
    (method override (dynamic-set-scrollee-size self))
    (method override (scrollee-width self))
    (method override (scrollee-content-width self))
    (method (calculate-scrollee-width self))
    (method package (calculate-contour-scrollee-width self))
    (method override (invalidate-update self))
    (method public (get-length self) <fx>)
    (method public (get-limit self) <fx>)
    (method public (get-paragraph self line <fx>) <Paragraph>)
    (method public (paragraph-string self line <fx>) <string>)
    (method public (paragraph-length self line <fx>) <fx>)
    (method (paragraph->string self paragraph <Paragraph>) <string>)
    (method public (first-paragraph self))
    (method override (get-print-area self context))
    (method package (paginate-range self start end page-width page-height))
    (method override (setup-printing self))
    (method override (restore-printing self preserved))
    (method package virtual (draw-enabled? self))
    (method override (get-drawing-background self context))
    (method override (get-skin self))
    (method public (next-word self pos (constituent-test: constituent-test (unspecified))))
    (method public (previous-word self pos (constituent-test: constituent-test (unspecified))))
    (method public virtual (get-constituent-test self))
    (method public virtual (text-constituent? self char))
    (method public virtual (get-match-test self))
    (method public (move-forward self pos word?))
    (method public (move-backward self pos word?))
    (method public (insert-char self range c))
    (method public (insert-string self range str))
    (method public (insert-newline self range))
    (method public (insert-styled self range string style))
    (method public (insert-link self range string (font: font (unspecified)) (anchor: anchor (unspecified)) (action: action (unspecified))))
    (method public (insert-image self range moniker))
    (method public (insert-view self range view/form))
    (method public (create-table self (size: size (unspecified)) (header?: header? (unspecified)) (node-column?: node-column? (unspecified)) (columns: columns (unspecified)) (row-count: row-count (unspecified))))
    (method public (insert-table self range . rest))
    (method public virtual (insert-table-of-content self))
    (method (with-adjusted-marks self range thunk))
    (method public (delete-range self range))
    (method public (replace self range <Range$Cell$> strings))
    (method package (replace-text self range <Range$Cell$> strings))
    (method package (replace-range self range <Range$Cell$> strings))
    (method package (invalidate-paragraph self paragraph))
    (method package virtual (replace-recolorize self start count))
    (method public (get-text self))
    (method public (set-text self value))
    (method (parse-text-content self content))
    (method (parse-string-content self content))
    (method (parse-markup-content self node))
    (method public (patch-formatted-bug self))
    (method protected (read-formatted self moniker))
    (method protected (read-formatted-string self str))
    (method protected (save-formatted self moniker))
    (method package (print-formatted self output range <Range$Cell$+>))
    (method public (get-formatted-content self))
    (method public (set-formatted-content self text))
    (method (complete-setup self rows count height))
    (method public (wrap-content self context))
    (method package (wrap-paragraph self context paragraph))
    (method protected (wrap-paragraph-lowlevel self context paragraph))
    (method (range-paragraphs self range <Range$Cell$>))
    (method package (replace-formatted self range <Range$Cell$> info))
    (method package (replace-formatted-text self range <Range$Cell$> strings formats styles paragraphs))
    (method public (toggle-bulleted self line))
    (method public (indent-paragraph self line paragraph delta))
    (method package (set-justification self line paragraph justification))
    (method (modify-format self paragraph proc))
    (method package (set-paragraph-format self paragraph format))
    (method public (apply-style self name start (end (unspecified))))
    (method public (stylize self name/style start (end (unspecified))))
    (method public (stylize-range self range <Range$Cell$> style <Style> (layout-scrollee? (unspecified))))
    (method public (modify-style self range <Range$Cell$> proc))
    (method public (remove-style self range))
    (method public (push-style self range style-name))
    (method public (pop-style self range style-name))
    (method public (set-text-alignment self range <Range$Cell$> alignment))
    (method public (set-text-font self range <Range$Cell$> font <Font>))
    (method public (set-text-style self range <Range$Cell$> style <Style>))
    (method public (set-text-color self range <Range$Cell$> color <Color>))
    (method public (set-highlight-color self range <Range$Cell$> color <Color+>))
    (method public (set-frame-color self range <Range$Cell$> color <Color+>))
    (method public (toggle-bold self range <Range$Cell$>))
    (method public (toggle-italic self range <Range$Cell$>))
    (method public (toggle-underline self range <Range$Cell$>))
    (method public (for-each-paragraph self proc (start: start (unspecified)) (end: end (unspecified))))
    (method public (get-default-format self))
    (method public (set-default-format self value))
    (method public (get-formats-domain self))
    (method public (get-named-formats self))
    (method public (get-interned-formats self))
    (method public (symbolize-format self format))
    (method public (add-format self name pref-format) <Format>)
    (method public (locate-format self name/format (error?: error? (unspecified))) <Format>)
    (method public (intern-format self format) <Format>)
    (method (reference-format self formats reference))
    (method public (get-default-style self))
    (method public (set-default-style self value))
    (method public (patch-default-style-height self))
    (method public (get-styles-domain self))
    (method public (get-named-styles self))
    (method public (get-interned-styles self))
    (method public (symbolize-style self style))
    (method public (add-style self name pref-style) <Style>)
    (method public (locate-style self name/style (error?: error? (unspecified))) <Style>)
    (method public (intern-style self style) <Style>)
    (method (reference-style self styles reference))
    (definition (fix-view-style-parent paragraph))
    (method public (comment-style? self style))
    (method public (string-style? self style))
    (method public (textual-style? self style))
    (definition (run-infos->string infos))
    (method (make-runs self string <string> styles infos))
    (method public (get-default-height self) <fx>)
    (method public (get-height-at self pos <Cell>) <fx>)
    (method public (compute-width self) <fx>)
    (method public (new-range self start end))
    (method public (range-strings self range <Range$Cell$>) <list>)
    (method public (range-first-string self range <Range$Cell$>) <string>)
    (method (position-offset self pos <Cell>) <fx>)
    (method (offset-position self offset <fx>) <Cell>)
    (method public (get-format-at self pos <Cell>) <Format>)
    (method public (get-run-at self pos <Cell>) <Run+>)
    (method public (get-style-at self pos <Cell>) <Style>)
    (method public (get-style-at* self pos <Cell>) <Style>)
    (method public (uncolorize-row self line <fx>) <void>)
    (method public (colorize self color <Color> start <Cell> (end (unspecified))))
    (method public (fill self color <Color> pos <Cell>) <void>)
    (method public (unfill self pos <Cell>) <void>)
    (method public (new-colorizer self))
    (method (line->view self line <fx>) <fx>)
    (method public (text-regular-search self search-context (start: start (unspecified)) (end: end (unspecified)) (reversed?: reversed? (unspecified))))
    (method public (text-regular-search-all self search-context (start: start (unspecified)) (end: end (unspecified))))
    (method public (text-search self context . rest))
    (method public (text-search-all self context . rest))
    (method package (search-context self obj (whole-words?: whole-words? (unspecified)) (ignore-case?: ignore-case? (unspecified)))))
  (hub get-wrap?)
  (hub set-wrap?)
  (hub get-base-format)
  (hub set-base-format)
  (hub get-base-style)
  (hub set-base-style)
  (hub get-paragraph-spacing)
  (hub set-paragraph-spacing)
  (hub get-char-encoding)
  (hub set-char-encoding)
  (hub get-eol-encoding)
  (hub set-eol-encoding)
  (hub get-propagate-styles?)
  (hub set-propagate-styles?)
  (hub get-syntax)
  (hub set-syntax)
  (hub get-undoer)
  (hub get-tabs)
  (hub set-tabs)
  (hub get-formats)
  (hub get-styles)
  (hub get-wrap-width)
  (hub set-wrap-width)
  (hub get-wrap-patch)
  (hub set-wrap-patch)
  (hub new-syntax)
  (hub get-paragraphs)
  (hub set-paragraphs)
  (hub reset-modified?)
  (hub update-status)
  (hub update-moniker-time)
  (hub load-content)
  (hub save-content)
  (hub reload-moniker)
  (hub compare-moniker)
  (hub empty-content)
  (hub empty-text)
  (hub get-string-content)
  (hub set-string-content)
  (hub read-content)
  (hub read-moniker)
  (hub reload-content)
  (hub for-each-logical-range)
  (hub for-each-range)
  (hub make-tabs-from)
  (hub text-beginning)
  (hub text-ending)
  (hub text-range)
  (hub text-empty?)
  (hub get-char)
  (hub get-string)
  (hub next!)
  (hub previous!)
  (hub next-cell)
  (hub previous-cell)
  (hub get-range-strings)
  (hub next-pos)
  (hub previous-pos)
  (hub get-column)
  (hub calculate-contour-scrollee-width)
  (hub get-length)
  (hub get-limit)
  (hub get-paragraph)
  (hub paragraph-string)
  (hub paragraph-length)
  (hub first-paragraph)
  (hub paginate-range)
  (hub draw-enabled?)
  (hub next-word)
  (hub previous-word)
  (hub get-constituent-test)
  (hub text-constituent?)
  (hub get-match-test)
  (hub move-forward)
  (hub move-backward)
  (hub insert-char)
  (hub insert-string)
  (hub insert-newline)
  (hub insert-styled)
  (hub insert-link)
  (hub insert-image)
  (hub insert-view)
  (hub create-table)
  (hub insert-table)
  (hub insert-table-of-content)
  (hub delete-range)
  (hub replace)
  (hub replace-text)
  (hub replace-range)
  (hub invalidate-paragraph)
  (hub replace-recolorize)
  (hub get-text)
  (hub set-text)
  (hub patch-formatted-bug)
  (hub read-formatted)
  (hub read-formatted-string)
  (hub save-formatted)
  (hub print-formatted)
  (hub get-formatted-content)
  (hub set-formatted-content)
  (hub wrap-content)
  (hub wrap-paragraph)
  (hub wrap-paragraph-lowlevel)
  (hub replace-formatted)
  (hub replace-formatted-text)
  (hub toggle-bulleted)
  (hub indent-paragraph)
  (hub set-justification)
  (hub set-paragraph-format)
  (hub apply-style)
  (hub stylize)
  (hub stylize-range)
  (hub modify-style)
  (hub remove-style)
  (hub push-style)
  (hub pop-style)
  (hub set-text-alignment)
  (hub set-text-font)
  (hub set-text-style)
  (hub set-text-color)
  (hub set-highlight-color)
  (hub set-frame-color)
  (hub toggle-bold)
  (hub toggle-italic)
  (hub toggle-underline)
  (hub for-each-paragraph)
  (hub get-default-format)
  (hub set-default-format)
  (hub get-formats-domain)
  (hub get-named-formats)
  (hub get-interned-formats)
  (hub symbolize-format)
  (hub add-format)
  (hub locate-format)
  (hub intern-format)
  (hub get-default-style)
  (hub set-default-style)
  (hub patch-default-style-height)
  (hub get-styles-domain)
  (hub get-named-styles)
  (hub get-interned-styles)
  (hub symbolize-style)
  (hub add-style)
  (hub locate-style)
  (hub intern-style)
  (hub comment-style?)
  (hub string-style?)
  (hub textual-style?)
  (hub get-default-height)
  (hub get-height-at)
  (hub compute-width)
  (hub new-range)
  (hub range-strings)
  (hub range-first-string)
  (hub get-format-at)
  (hub get-run-at)
  (hub get-style-at)
  (hub get-style-at*)
  (hub uncolorize-row)
  (hub colorize)
  (hub fill)
  (hub unfill)
  (hub new-colorizer)
  (hub text-regular-search)
  (hub text-regular-search-all)
  (hub text-search)
  (hub text-search-all)
  (hub search-context))
