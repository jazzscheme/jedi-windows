(module jazz.text.Text-Explorer jazz
  (import (jazz.text))
  (class Explore-Error extends Source-Error)
  (class Text-Explorer extends Explorer
    (slot model <Text-Model> getter generate)
    (slot syntax <Text-Syntax> getter generate)
    (slot paragraphs <Axis>)
    (slot limit <fx>)
    (slot beginning <Cell>)
    (slot ending <Cell>)
    (slot start <Cell>)
    (slot end <Cell>)
    (slot kind <symbol+>)
    (slot line-hook <procedure+> accessors generate)
    (method override (initialize self mdl <Text-Model> (direction: direction (unspecified)) (start: start (unspecified)) (end: end (unspecified)) (range: range (unspecified))))
    (method override (goto-beginning self) <void>)
    (method (goto-ending self) <void>)
    (method public (at-beginning? self) <bool>)
    (method public (at-ending? self) <bool>)
    (method public (get-start self) <Cell>)
    (method public (set-start self pos <Cell>) <void>)
    (method public (get-end self) <Cell>)
    (method public (set-end self pos <Cell>) <void>)
    (method public (get-range self) <Range$Cell$>)
    (method public (set-range self range <Range$Cell$>) <void>)
    (method public (set-pos self pos <Cell+>) <void>)
    (method protected (call-line-hook self))
    (method public (looking-at? self str <string>))
    (method public (looking-back? self str <string>))
    (method public (get-kind self) <symbol>)
    (method package (set-kind self knd <symbol+>) <void>)
    (method package (get-paragraph self n <fx>) <Paragraph>)
    (method package (paragraph-string self n <fx>) <string>)
    (method package (paragraph-length self n <fx>) <fx>)
    (method public (get-char self pos <Cell>) <char>)
    (method public (get-range-string self start <Cell> end <Cell>) <string>)
    (method public (get-marked self) <string>)
    (method public (read-marked self))
    (method public (get-symbol-string self) <string>)
    (method public (find-marked-symbol self) <symbol+>)
    (method public (intern-marked-symbol self) <symbol>)
    (method public (get-range-symbol self start end) <symbol+>)
    (method public (get-mark self))
    (method public (specifier-marked? self))
    (method (next! self pos <Cell>) <bool>)
    (method (previous! self pos <Cell>) <bool>)
    (method (next-cell! self pos <Cell>))
    (method (previous-cell! self pos <Cell>))
    (method package (next-pos self pos <Cell> offset <fx>) <Cell+>)
    (method package (previous-pos self pos <Cell> offset <fx>) <Cell+>)
    (method override (forward self))
    (method (forward-n self offset <fx>))
    (method override (backward self))
    (method package (backward-n self offset <fx>))
    (method public (next-char self pos <Cell> offset <fx>) <char+>)
    (method public (char-forward self offset <fx>) <char+>)
    (method public (previous-char self pos <Cell> offset <fx>) <char+>)
    (method public (char-backward self offset <fx>) <char+>)
    (method public (forward-while self predicate <procedure>))
    (method public (backward-while self predicate <procedure>))
    (method public (forward-until self predicate <procedure>))
    (method public (backward-until self predicate <procedure>))
    (method public (forward-to self char))
    (method public (backward-to self char))
    (method public (forward-whitespaces self))
    (method public (backward-whitespaces self))
    (method public (forward-word self))
    (method public (forward-non-word self))
    (method public (backward-word self))
    (method public (backward-non-word self))
    (method protected virtual (forward-constituent self))
    (method protected virtual (backward-constituent self))
    (method public virtual (outer-expr self . rest))
    (method public virtual (text-constituent? self char))
    (method public (paragraph-start self))
    (method public (paragraph-end self))
    (method public (previous-paragraph self))
    (method public (next-paragraph self))
    (method public (paragraph-column self))
    (method public (backward-style self predicate (strict?: strict? (unspecified))))
    (method public (forward-style self predicate (strict?: strict? (unspecified))))
    (method public (select-style self predicate (strict?: strict? (unspecified)))))
  (hub get-model)
  (hub get-syntax)
  (hub get-line-hook)
  (hub set-line-hook)
  (hub at-beginning?)
  (hub at-ending?)
  (hub get-start)
  (hub set-start)
  (hub get-end)
  (hub set-end)
  (hub get-range)
  (hub set-range)
  (hub set-pos)
  (hub call-line-hook)
  (hub looking-at?)
  (hub looking-back?)
  (hub get-kind)
  (hub set-kind)
  (hub get-paragraph)
  (hub paragraph-string)
  (hub paragraph-length)
  (hub get-char)
  (hub get-range-string)
  (hub get-marked)
  (hub read-marked)
  (hub get-symbol-string)
  (hub find-marked-symbol)
  (hub intern-marked-symbol)
  (hub get-range-symbol)
  (hub get-mark)
  (hub specifier-marked?)
  (hub next-pos)
  (hub previous-pos)
  (hub backward-n)
  (hub next-char)
  (hub char-forward)
  (hub previous-char)
  (hub char-backward)
  (hub forward-while)
  (hub backward-while)
  (hub forward-until)
  (hub backward-until)
  (hub forward-to)
  (hub backward-to)
  (hub forward-whitespaces)
  (hub backward-whitespaces)
  (hub forward-word)
  (hub forward-non-word)
  (hub backward-word)
  (hub backward-non-word)
  (hub forward-constituent)
  (hub backward-constituent)
  (hub outer-expr)
  (hub text-constituent?)
  (hub paragraph-start)
  (hub paragraph-end)
  (hub previous-paragraph)
  (hub next-paragraph)
  (hub paragraph-column)
  (hub backward-style)
  (hub forward-style)
  (hub select-style))
