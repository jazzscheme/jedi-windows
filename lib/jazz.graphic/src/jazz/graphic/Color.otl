(module jazz.graphic.Color jazz
  (import (jazz.exemplar))
  (import (jazz.graphic))
  (class Color extends Exemplar
    (slot _red)
    (slot _green)
    (slot _blue)
    (slot _alpha)
    (method override (get-attributes self))
    (method override (get-attribute self #:attr^2))
    (method override (set-attribute self #:attr^2 #:val^3))
    (method override (get-attribute-default self #:attr^2))
    (method override (get-attribute-no-default self #:attr^2))
    (method override (attribute=? self #:attr^2 x y))
    (method override (get self #:attr^2))
    (method override (set self #:attr^2 #:val^3))
    (method public (get-red self) <fl>)
    (method public (set-red self #:val^3 <fl>))
    (method public (get-green self) <fl>)
    (method public (set-green self #:val^3 <fl>))
    (method public (get-blue self) <fl>)
    (method public (set-blue self #:val^3 <fl>))
    (method public (get-alpha self) <fl>)
    (method public (set-alpha self #:val^3 <fl>))
    (method override (initialize-attributes self attributes))
    (method override (present-attribute self attribute value))
    (method override (default-domain self))
    (method public (white? self))
    (method public (->rgb self))
    (method public (->red/green/blue self))
    (method public (determine-color self enabled? selected?))
    (method public (get-opposite self)))
  (hub get-red)
  (hub set-red)
  (hub get-green)
  (hub set-green)
  (hub get-blue)
  (hub set-blue)
  (hub get-alpha)
  (hub set-alpha)
  (hub white?)
  (hub ->rgb)
  (hub ->red/green/blue)
  (hub determine-color)
  (hub get-opposite))
