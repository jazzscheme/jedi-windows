(module jazz.graphic jazz
  (export (jazz.graphic.syntax))
  (export (jazz.graphic.autoload))
  (import (jazz.graphic.autoload))
  (import (jazz.exemplar))
  (import (jazz.geometry))
  (hub ->rgb)
  (hub arc)
  (hub blit-surface)
  (hub cairo-line-to)
  (hub cairo-move-to)
  (hub clear)
  (hub combine-and!)
  (hub combine-diff!)
  (hub combine-or!)
  (hub combine-xor!)
  (hub determine-color)
  (hub device->logical)
  (hub draw-arrow-tip)
  (hub draw-at)
  (hub draw-caption)
  (hub draw-check)
  (hub draw-checkerboard)
  (hub draw-diamond)
  (hub draw-edge)
  (hub draw-filtered)
  (hub draw-image)
  (hub draw-opaque-image)
  (hub draw-push-button)
  (hub draw-radio-button)
  (hub draw-raised)
  (hub draw-rectangle)
  (hub draw-scroll-bar)
  (hub draw-sorted)
  (hub draw-surface)
  (hub draw-tabbed-text)
  (hub draw-text)
  (hub ellipse)
  (hub ellipse$fl$)
  (hub empty!)
  (hub empty?)
  (hub export-to-png)
  (hub fill)
  (hub fill-at)
  (hub fill-background)
  (hub fill-gradient)
  (hub fill-image)
  (hub fill-insets)
  (hub fill-rect)
  (hub fill-region)
  (hub flush)
  (hub font-height)
  (hub frame-partial-rect)
  (hub frame-rect)
  (hub frame-round-rect)
  (hub get-all-widths)
  (hub get-alpha)
  (hub get-antialias)
  (hub get-ascent)
  (hub get-attribute)
  (hub get-attributes)
  (hub get-background)
  (hub get-blue)
  (hub get-bold?)
  (hub get-box)
  (hub get-char-width)
  (hub get-char-widths)
  (hub get-clipper)
  (hub get-content)
  (hub get-context)
  (hub get-fill-mode)
  (hub get-font)
  (hub get-font-height)
  (hub get-font-name)
  (hub get-green)
  (hub get-handle)
  (hub get-height)
  (hub get-hint-metrics)
  (hub get-hint-style)
  (hub get-image)
  (hub get-italic?)
  (hub get-kind)
  (hub get-max-char-width)
  (hub get-metrics)
  (hub get-mode)
  (hub get-moniker)
  (hub get-operator)
  (hub get-parts)
  (hub get-point-size)
  (hub get-portfolio)
  (hub get-position)
  (hub get-red)
  (hub get-resource)
  (hub get-scaled-font)
  (hub get-shadow)
  (hub get-size)
  (hub get-source)
  (hub get-subpixel)
  (hub get-text-extent)
  (hub get-text-metrics)
  (hub get-text-width)
  (hub get-title)
  (hub get-underline?)
  (hub get-viewer-class)
  (hub get-widths)
  (hub glyph-index)
  (hub gradient-fill-rect)
  (hub image-size)
  (hub iterate-rectangles)
  (hub line)
  (hub line-to)
  (hub line-to-no-stroke)
  (hub line-to-preserve)
  (hub logical->device)
  (hub move-to)
  (hub offset!)
  (hub paint)
  (hub painting-tree-algorithm)
  (hub present-matrix)
  (hub rectangle)
  (hub renew-context)
  (hub reset-clipper)
  (hub rotate)
  (hub scale)
  (hub set-alpha)
  (hub set-antialias)
  (hub set-background)
  (hub set-clipper)
  (hub set-color)
  (hub set-device-scale)
  (hub set-fill-mode)
  (hub set-font)
  (hub set-font-name)
  (hub set-handle)
  (hub set-line-width)
  (hub set-mask-surface)
  (hub set-moniker)
  (hub set-operator)
  (hub set-point-size)
  (hub set-portfolio)
  (hub set-position)
  (hub set-resource)
  (hub set-size)
  (hub set-source)
  (hub set-source-surface)
  (hub set-style)
  (hub set-text-color)
  (hub shadow-height)
  (hub show-page)
  (hub stroke)
  (hub text-extent)
  (hub text-width)
  (hub translate)
  (hub white?)
  (hub with-clip)
  (hub with-clipout)
  (hub with-clipping-transformation)
  (hub with-preserved-matrix)
  (hub with-pristine-clipping-transformation)
  (hub with-pristine-transformation)
  (hub with-transformation)
  (definition public validate-transform?)
  (definition (registered-object table name))
  (definition (for-each-object table proc))
  (definition public default-resolution)
  (definition *colors*)
  (definition public (colors-domain))
  (definition public (register-color name color))
  (definition public (registered-color name (alpha (unspecified))))
  (definition public (symbolic-colors))
  (definition public (symbolic-color color))
  (definition public (symbolize-color color (epsilon: epsilon (unspecified))))
  (definition public (for-each-color proc))
  (definition public (color=? x y))
  (definition public (color-similar? x y))
  (definition public (color-epsilon-similar? x y epsilon))
  (definition public (rgb->hsv r <fl> g <fl> b <fl>))
  (definition public (hsv->rgb h <fl> s <fl> v <fl>))
  (definition public (color->rgb color))
  (definition public (color->hsv color))
  (definition public (rgb->color r <fl> g <fl> b <fl>))
  (definition public (hsv->color h <fl> s <fl> v <fl>))
  (definition public (lighten color percentage))
  (definition public (darken color percentage))
  (definition public (soften color percentage))
  (definition public (harden color percentage))
  (definition public (color-cycle base cycle subcycle))
  (definition default-font-engine)
  (definition *font-engine*)
  (definition public (get-font-engine))
  (definition *fonts*)
  (definition public (fonts-domain))
  (definition public (init-fonts))
  (definition public (register-font name font))
  (definition public (registered-font name))
  (definition public (symbolic-fonts))
  (definition public (symbolic-font font))
  (definition public (for-each-font proc))
  (definition public (font=? x y))
  (definition public (copy-region region <Region>) <Region>)
  (definition public (region-union x <Region> y <Region>) <Region>)
  (definition public (region-intersection x <Region> y <Region>) <Region>)
  (definition public (region-difference x <Region> y <Region>) <Region>)
  (definition protected fix-clipper?)
  (definition protected (set-fix-clipper? fix?))
  (definition protected (fix-clipper rect))
  (definition public debug-paint?)
  (definition *debug-colors*)
  (definition *nb-debug-colors*)
  (definition *current-debug-color*)
  (definition public (cycle-debug-color!)))
